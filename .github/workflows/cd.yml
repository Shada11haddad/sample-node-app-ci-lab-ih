name: Deploy Node App on Azure VM

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  id-token: write   # harmless even though we use client-secret auth

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build the application (optional)
        run: |
          npm run build 2>/dev/null || echo "No build script found, skipping build step"

      - name: Run unit tests with coverage and JUnit reports
        env:
          JEST_JUNIT_OUTPUT: coverage/junit.xml
        run: npm run test:ci

      - name: Publish test results to Checks
        uses: dorny/test-reporter@v2.1.1
        if: always()
        with:
          name: Jest Test Results
          path: coverage/junit.xml
          reporter: jest-junit
          fail-on-error: true

      - name: Upload test results to GitHub
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: test-results-node
          path: coverage/
          retention-days: 30

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6.0.0
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=sample-node-app-saurabh
            -Dsonar.organization=sda
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.sources=.
            -Dsonar.exclusions=node_modules/**,coverage/**,tests/**,**/*.test.js,**/*.spec.js
            -Dsonar.tests=tests/
            -Dsonar.test.inclusions=**/*.test.js,**/*.spec.js
            -Dsonar.coverage.exclusions=node_modules/**,coverage/**,tests/**,**/*.test.js,**/*.spec.js

      - name: Create deployment package
        run: |
          set -euo pipefail
          STAGING="$GITHUB_WORKSPACE/deployment-package"
          rm -rf "$STAGING"
          mkdir -p "$STAGING"

          [ -d public ] && cp -r public "$STAGING/" || echo "No public/ directory found"
          # Do NOT include node_modules; we install on the VM
          [ -f server.js ] && cp server.js "$STAGING/" || echo "No server.js found"
          cp package.json "$STAGING/"
          cp package-lock.json "$STAGING/"
          [ -f README.md ] && cp README.md "$STAGING/" || true
          [ -f Dockerfile ] && cp Dockerfile "$STAGING/" || echo "No Dockerfile found"

          (cd "$STAGING" && npm pkg delete devDependencies || true)

          TS="$(date +%Y%m%d-%H%M%S)"
          SHORT_SHA="${GITHUB_SHA::7}"
          ZIP_NAME="deployment-package-${SHORT_SHA}-${TS}.zip"
          (cd "$GITHUB_WORKSPACE" && zip -r "$ZIP_NAME" "deployment-package")
          echo "ZIP_NAME=$ZIP_NAME" >> "$GITHUB_ENV"

      - name: Azure login (client secret)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Upload deployment package artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: deployment-package-node-${{ github.run_number }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 90

      - name: Upload package to Blob (key-based, hardened)
        if: ${{ success() }}
        uses: azure/cli@v2.1.0
        env:
          ZIP_NAME: ${{ env.ZIP_NAME }}
          AZ_STORAGE_ACCOUNT: ${{ secrets.AZ_STORAGE_ACCOUNT }}
          AZ_STORAGE_CONTAINER: ${{ secrets.AZ_STORAGE_CONTAINER }}
          AZ_STORAGE_KEY: ${{ secrets.AZ_STORAGE_KEY }}
        with:
          inlineScript: |
            set -euo pipefail
            : "${AZ_STORAGE_ACCOUNT:?AZ_STORAGE_ACCOUNT missing}"
            : "${AZ_STORAGE_CONTAINER:?AZ_STORAGE_CONTAINER missing}"
            : "${AZ_STORAGE_KEY:?AZ_STORAGE_KEY missing}"
            : "${ZIP_NAME:?ZIP_NAME missing}"

            # Trim stray whitespace/newlines in key
            AZ_STORAGE_KEY="$(printf %s "$AZ_STORAGE_KEY" | tr -d '\r\n')"
            export AZ_STORAGE_KEY

            # Ensure container exists (idempotent)
            az storage container create \
              --name "$AZ_STORAGE_CONTAINER" \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --only-show-errors 1>/dev/null

            # Upload artifact
            echo "Uploading $ZIP_NAME ..."
            az storage blob upload \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --container-name "$AZ_STORAGE_CONTAINER" \
              --file "$ZIP_NAME" \
              --name "$ZIP_NAME" \
              --overwrite true \
              --only-show-errors

            # SAS URL for VM to download (1 hour)
            SAS=$(az storage blob generate-sas \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --container-name "$AZ_STORAGE_CONTAINER" \
              --name "$ZIP_NAME" \
              --permissions r \
              --expiry "$(date -u -d '+1 hour' '+%Y-%m-%dT%H:%MZ')" \
              --https-only --full-uri -o tsv)

            echo "::add-mask::$SAS"
            echo "PACKAGE_SAS_URL=$SAS" >> "$GITHUB_ENV"

      - name: Create deployment script
        if: ${{ success() }}
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          # Config
          APP_DIR="/opt/myapp"
          APP_NAME="myapp"
          APP_USER="azureuser"
          PACKAGE_URL="$1"

          # Tools
          if ! command -v curl >/dev/null 2>&1; then sudo apt-get update && sudo apt-get install -y curl; fi
          if ! command -v unzip >/dev/null 2>&1; then sudo apt-get update && sudo apt-get install -y unzip; fi
          if ! command -v nc >/dev/null 2>&1; then sudo apt-get update && sudo apt-get install -y netcat; fi

          # Node 22
          if ! command -v node >/dev/null 2>&1 || ! node -v | grep -q "^v22"; then
            echo "Installing Node.js 22..."
            curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi

          # PM2
          if ! command -v pm2 >/dev/null 2>&1; then
            echo "Installing PM2..."
            sudo npm install -g pm2
          fi

          # Folders
          sudo mkdir -p "$APP_DIR/releases" "$APP_DIR/current"

          # Download package
          echo "Downloading package..."
          curl -fSL "$PACKAGE_URL" -o /tmp/app.zip

          # Extract to new release directory
          RELEASE_DIR="$APP_DIR/releases/$(date +%Y%m%d-%H%M%S)"
          sudo mkdir -p "$RELEASE_DIR"
          unzip -o /tmp/app.zip -d "$RELEASE_DIR"

          # Flatten "deployment-package"
          if [ -d "$RELEASE_DIR/deployment-package" ]; then
            sudo mv "$RELEASE_DIR/deployment-package"/* "$RELEASE_DIR/" 2>/dev/null || true
            sudo rmdir "$RELEASE_DIR/deployment-package" 2>/dev/null || true
          fi

          # Ownership
          sudo chown -R "$APP_USER:$APP_USER" "$RELEASE_DIR"

          # Install prod deps
          if [ -f "$RELEASE_DIR/package.json" ]; then
            echo "Installing dependencies..."
            sudo -u "$APP_USER" bash -c "cd '$RELEASE_DIR' && npm ci --omit=dev"
          fi

          # Symlink deploy
          echo "Linking current -> $RELEASE_DIR"
          sudo rm -rf "$APP_DIR/current"
          sudo ln -sfn "$RELEASE_DIR" "$APP_DIR/current"

          # PM2 start/reload (non-blocking)
          if sudo -u "$APP_USER" pm2 describe "$APP_NAME" >/dev/null 2>&1; then
            sudo -u "$APP_USER" pm2 reload "$APP_NAME"
          else
            sudo -u "$APP_USER" pm2 start "$APP_DIR/current/server.js" --name "$APP_NAME"
          fi
          sudo -u "$APP_USER" pm2 save
          sudo -u "$APP_USER" pm2 startup systemd -u "$APP_USER" --hp "/home/$APP_USER" >/dev/null 2>&1 || true

          # Basic health check (PORT defaults to 3000)
          PORT="${PORT:-3000}"
          for i in {1..30}; do
            if nc -z 127.0.0.1 "$PORT"; then
              echo "App is listening on port $PORT"
              break
            fi
            sleep 1
          done

          # Cleanup
          rm -f /tmp/app.zip
          echo "Deployment completed successfully"
          EOF

      - name: Upload and execute deployment script
        if: ${{ success() }}
        uses: azure/cli@v2.1.0
        env:
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_VM_NAME: ${{ secrets.AZURE_VM_NAME }}
          PACKAGE_SAS_URL: ${{ env.PACKAGE_SAS_URL }}
        with:
          inlineScript: |
            # Upload script to the VM
            az vm run-command invoke \
              --resource-group "$AZURE_RESOURCE_GROUP" \
              --name "$AZURE_VM_NAME" \
              --command-id RunShellScript \
              --scripts "cat > /tmp/deploy.sh << 'DEPLOY_SCRIPT_EOF'
            $(cat deploy.sh)
            DEPLOY_SCRIPT_EOF
            chmod +x /tmp/deploy.sh"

            # Execute it with the SAS URL
            az vm run-command invoke \
              --resource-group "$AZURE_RESOURCE_GROUP" \
              --name "$AZURE_VM_NAME" \
              --command-id RunShellScript \
              --scripts "sudo /tmp/deploy.sh '$PACKAGE_SAS_URL'"
